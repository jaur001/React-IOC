{"ast":null,"code":"export class HttpParams {\n  constructor(url, method, async, reqheaders, reqBody, includeCredentials, processResponse, processError) {\n    this.url = url;\n    this.method = method;\n    this.async = async;\n    this.reqheaders = reqheaders;\n    this.reqBody = reqBody;\n    this.includeCredentials = includeCredentials;\n    this.processResponse = processResponse;\n    this.processError = processError;\n  }\n\n}\nconst HttpClient = {\n  // Function that makes Http request using XMLHttpRequest\n  makeHttpRequest: function (httpRequest) {\n    if (!(httpRequest instanceof HttpParams)) {\n      this.processBadRequest(\"Http params for Http request not found\");\n      return;\n    }\n\n    const xhr = new XMLHttpRequest();\n\n    xhr.onreadystatechange = function () {\n      HttpClient.handleResponse(xhr, httpRequest); // Call back for response\n    };\n\n    xhr.open(httpRequest.method, httpRequest.url, httpRequest.async);\n\n    if (httpRequest.reqheaders != null) {\n      let headerList = Object.entries(httpRequest.reqheaders);\n\n      for (let [key, value] of headerList) {\n        xhr.setRequestHeader(key, value);\n      }\n    }\n\n    if (httpRequest.includeCredentials) xhr.withCredentials = true;\n    xhr.send(JSON.stringify(httpRequest.reqBody));\n  },\n  processBadRequest: function (message) {\n    console.log(\"There was an error making an Http request!!: \" + message);\n  },\n  handleResponse: function (xhr, httpRequest) {\n    if (xhr.readyState === 4) {\n      let body = {};\n\n      try {\n        body = JSON.parse(xhr.response);\n      } catch (error) {\n        body = xhr.response;\n      }\n\n      let headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n      if (xhr.status >= 200 && xhr.status < 300) this.processSuccessRequest(httpRequest.processResponse, body, headers); // Call back for successful response\n      else this.processUnSuccessRequest(httpRequest.processError, xhr.status, body, headers); // Call back for error response\n    }\n  },\n  processSuccessRequest: function (processResponse, body, headers) {\n    if (processResponse != null) processResponse(body, headers); // Execute function to process correct response\n  },\n  processUnSuccessRequest: function (processError, status, body, headers) {\n    if (processError != null) processError(status, body, headers); // Execute function to proccess error  \n  },\n  // Parse the response headers to retrieve a JSON with the response headers\n  parseResponseHeaders: function (headers) {\n    const arrayHeaders = headers.trim().split(/[\\r\\n]+/);\n    let headerJson = {};\n    arrayHeaders.forEach(function (line) {\n      const parts = line.split(': ');\n      const header = parts.shift();\n      const value = parts.join(': ');\n      headerJson[header] = value;\n    });\n    return headerJson;\n  }\n};\nexport { HttpClient };","map":{"version":3,"names":["HttpParams","constructor","url","method","async","reqheaders","reqBody","includeCredentials","processResponse","processError","HttpClient","makeHttpRequest","httpRequest","processBadRequest","xhr","XMLHttpRequest","onreadystatechange","handleResponse","open","headerList","Object","entries","key","value","setRequestHeader","withCredentials","send","JSON","stringify","message","console","log","readyState","body","parse","response","error","headers","parseResponseHeaders","getAllResponseHeaders","status","processSuccessRequest","processUnSuccessRequest","arrayHeaders","trim","split","headerJson","forEach","line","parts","header","shift","join"],"sources":["C:/Development/Personal/React-IOC/react-ioc/src/utils/HttpClient.js"],"sourcesContent":["export class HttpParams{\r\n    constructor (url,method,async,reqheaders,reqBody,includeCredentials,processResponse,processError){\r\n        this.url = url;\r\n        this.method = method;\r\n        this.async = async;\r\n        this.reqheaders = reqheaders;\r\n        this.reqBody = reqBody;\r\n        this.includeCredentials = includeCredentials;\r\n        this.processResponse = processResponse;\r\n        this.processError = processError;\r\n    }\r\n}\r\n\r\nconst HttpClient = {\r\n    // Function that makes Http request using XMLHttpRequest\r\n    makeHttpRequest: function (httpRequest){\r\n        if (!(httpRequest instanceof HttpParams)){\r\n            this.processBadRequest(\"Http params for Http request not found\");\r\n            return;\r\n        }    \r\n        const xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function(){   \r\n            HttpClient.handleResponse(xhr,httpRequest); // Call back for response\r\n        }\r\n        xhr.open(httpRequest.method, httpRequest.url, httpRequest.async);\r\n        if(httpRequest.reqheaders != null){\r\n            let headerList = Object.entries(httpRequest.reqheaders);\r\n            for (let [key, value] of headerList) {\r\n                xhr.setRequestHeader(key,value);\r\n            }\r\n        }\r\n        if(httpRequest.includeCredentials) xhr.withCredentials = true;\r\n        xhr.send(JSON.stringify(httpRequest.reqBody));\r\n    },\r\n\r\n    processBadRequest:function(message) {\r\n        console.log(\"There was an error making an Http request!!: \" + message);\r\n    },\r\n\r\n    handleResponse:  function(xhr,httpRequest) {\r\n        if (xhr.readyState === 4) {\r\n            let body = {};\r\n            try {\r\n                body = JSON.parse(xhr.response);\r\n            } catch (error) {\r\n                body = xhr.response;   \r\n            }\r\n            let headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\r\n            if(xhr.status >= 200 && xhr.status < 300)\r\n                this.processSuccessRequest(httpRequest.processResponse,body,headers);  // Call back for successful response\r\n            else this.processUnSuccessRequest(httpRequest.processError,xhr.status,body,headers);  // Call back for error response\r\n        }\r\n    },\r\n\r\n    processSuccessRequest: function(processResponse,body,headers){\r\n        if(processResponse!=null) processResponse(body,headers); // Execute function to process correct response\r\n    },\r\n\r\n    processUnSuccessRequest: function(processError,status,body,headers){\r\n        if(processError!=null) processError(status,body,headers); // Execute function to proccess error  \r\n    },\r\n\r\n    // Parse the response headers to retrieve a JSON with the response headers\r\n    parseResponseHeaders: function (headers){\r\n        const arrayHeaders = headers.trim().split(/[\\r\\n]+/);\r\n        let headerJson = {};\r\n        arrayHeaders.forEach(function (line) {\r\n        const parts = line.split(': ');\r\n        const header = parts.shift();\r\n        const value = parts.join(': ');\r\n        headerJson[header] = value;\r\n        });\r\n        return headerJson;\r\n    }\r\n    \r\n}\r\n\r\nexport {HttpClient};"],"mappings":"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"},"metadata":{},"sourceType":"module"}